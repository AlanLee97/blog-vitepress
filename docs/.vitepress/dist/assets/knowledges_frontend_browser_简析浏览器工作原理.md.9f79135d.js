import{_ as s,o as a,c as n,f as l}from"./app.3f2bf410.js";const h=JSON.parse('{"title":"浏览器工作原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"导航","slug":"导航","link":"#导航","children":[{"level":3,"title":"查找DNS","slug":"查找dns","link":"#查找dns","children":[]},{"level":3,"title":"TCP握手","slug":"tcp握手","link":"#tcp握手","children":[]},{"level":3,"title":"TLS协商","slug":"tls协商","link":"#tls协商","children":[]},{"level":3,"title":"总结导航流程","slug":"总结导航流程","link":"#总结导航流程","children":[]}]},{"level":2,"title":"获取/响应","slug":"获取-响应","link":"#获取-响应","children":[]},{"level":2,"title":"解析","slug":"解析","link":"#解析","children":[{"level":3,"title":"解析HTML","slug":"解析html","link":"#解析html","children":[]},{"level":3,"title":"解析CSS","slug":"解析css","link":"#解析css","children":[]},{"level":3,"title":"预加载扫描器(preload scan)","slug":"预加载扫描器-preload-scan","link":"#预加载扫描器-preload-scan","children":[]},{"level":3,"title":"构建渲染树","slug":"构建渲染树","link":"#构建渲染树","children":[]}]},{"level":2,"title":"渲染","slug":"渲染","link":"#渲染","children":[{"level":3,"title":"布局（重排）","slug":"布局-重排","link":"#布局-重排","children":[]},{"level":3,"title":"绘制","slug":"绘制","link":"#绘制","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"浏览器主要组件","slug":"浏览器主要组件","link":"#浏览器主要组件","children":[{"level":3,"title":"UI界面","slug":"ui界面","link":"#ui界面","children":[]},{"level":3,"title":"浏览器引擎","slug":"浏览器引擎","link":"#浏览器引擎","children":[]},{"level":3,"title":"渲染引擎","slug":"渲染引擎","link":"#渲染引擎","children":[]},{"level":3,"title":"网络","slug":"网络","link":"#网络","children":[]},{"level":3,"title":"用户界面后端","slug":"用户界面后端","link":"#用户界面后端","children":[]},{"level":3,"title":"JavaScript解释器","slug":"javascript解释器","link":"#javascript解释器","children":[]},{"level":3,"title":"数据存储","slug":"数据存储","link":"#数据存储","children":[]}]},{"level":2,"title":"Chrome浏览器架构","slug":"chrome浏览器架构","link":"#chrome浏览器架构","children":[{"level":3,"title":"浏览器进程","slug":"浏览器进程","link":"#浏览器进程","children":[]},{"level":3,"title":"渲染进程","slug":"渲染进程","link":"#渲染进程","children":[]},{"level":3,"title":"GPU 进程","slug":"gpu-进程","link":"#gpu-进程","children":[]},{"level":3,"title":"工具进程","slug":"工具进程","link":"#工具进程","children":[]},{"level":3,"title":"插件进程","slug":"插件进程","link":"#插件进程","children":[]},{"level":3,"title":"扩展进程","slug":"扩展进程","link":"#扩展进程","children":[]}]}],"relativePath":"knowledges/frontend/browser/简析浏览器工作原理.md"}'),p={name:"knowledges/frontend/browser/简析浏览器工作原理.md"},e=l(`<h1 id="浏览器工作原理" tabindex="-1">浏览器工作原理 <a class="header-anchor" href="#浏览器工作原理" aria-hidden="true">#</a></h1><p>前端岗位面试中，必问的一道题就是“从地址栏里输入URL到页面显示的过程发生了什么？”，在我看来这其实就是考察浏览器的工作原理，即从浏览器请求HTML内容到渲染页面的过程。</p><p>要回答这个问题，可以回答得很简单，也可以回答得很复杂。</p><p>简单回答：</p><ol><li>根据输入的URL的域名解析拿到真实IP进行访问</li><li>访问真实IP从服务器请求数据</li><li>浏览器将请求回来的数据（HTML）进行解析</li><li>将HTML文档解析成DOM树、CSSOM树、合成渲染树</li><li>浏览器调用GPU将渲染树生成图像画面显示在屏幕上</li></ol><p>其实上面的回答也能概括浏览器渲染页面的整个过程，但不够详细。下面我们来看下详细的渲染过程。</p><p>浏览器请求HTML内容到渲染页面的过程大体上可分为四个过程：</p><ol><li>导航</li><li>获取/响应</li><li>解析</li><li>渲染</li></ol><p><strong>基本流程图如下</strong><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/743297/1640100453407-32bace29-e081-48d1-af8d-2bccbb7b5f87.jpeg" alt=""></p><p><strong>详细一点的图如下</strong><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/743297/1640187931109-43d3014a-a888-41e8-a225-bc190082d248.jpeg" alt=""></p><p>接下来具体讲解下各个流程</p><h2 id="导航" tabindex="-1">导航 <a class="header-anchor" href="#导航" aria-hidden="true">#</a></h2><p>导航是加载web网页的第一个过程，从地址栏里输入URL就进入了导航流程，导航流程中所做的事情如下：</p><ol><li>查找DNS</li><li>TCP握手</li><li>TLS协商</li></ol><h3 id="查找dns" tabindex="-1">查找DNS <a class="header-anchor" href="#查找dns" aria-hidden="true">#</a></h3><p>通常我们在浏览器里输入的是网站的域名，例如<code>www.google.com</code>，经DNS查询之后，得到一个对应该域名的IP地址，例如<code>93.184.216.34</code><img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640133835137-68456553-cffb-4fc6-b09c-9eddf9a1d70c.png#clientId=uc29e28c7-3f3c-4&amp;from=paste&amp;id=ud9e12cb7&amp;name=image.png&amp;originHeight=172&amp;originWidth=630&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82300&amp;status=done&amp;style=none&amp;taskId=u6c20ab28-93db-4226-a758-7b1498725fa&amp;title=" alt="image.png"> 有了IP地址之后，接下来就是向目标服务器地址发起网络请求了。</p><h3 id="tcp握手" tabindex="-1">TCP握手 <a class="header-anchor" href="#tcp握手" aria-hidden="true">#</a></h3><p>有了IP地址之后，浏览器就向目标地址发起网络请求，通过TCP的三次握手建立连接，建立连接之后服务器就可以向浏览器响应数据了。</p><h3 id="tls协商" tabindex="-1">TLS协商 <a class="header-anchor" href="#tls协商" aria-hidden="true">#</a></h3><p>如今大部分站点都已升级HTTPS，HTTPS是基于TLS的安全版的HTTP，所以访问HTTPS的网站需要经过TLS的握手（协商）建立安全连接之后才能进行交换数据。</p><p>建立HTTPS安全连接比普通的HTTP连接需要花费更多的时间，但是这能保证数据的安全，这是值得的。</p><h3 id="总结导航流程" tabindex="-1">总结导航流程 <a class="header-anchor" href="#总结导航流程" aria-hidden="true">#</a></h3><p>导航流程就是在输入URL之后，根据域名去DNS系统查询对应的IP地址，根据得到的IP地址发起网络连接，经过TCP三次握手和TLS握手协商之后建立连接，服务器向浏览器响应数据的过程。下图展示了导航的基本流程 <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/743297/1640134952821-fcd27b44-4192-4c7f-b661-9b6da14460a3.jpeg#clientId=uc29e28c7-3f3c-4&amp;from=paste&amp;id=u0abe46ed&amp;originHeight=412&amp;originWidth=729&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u21a577bd-6731-4d96-9561-12e3cd09e6e&amp;title=" alt=""></p><h2 id="获取-响应" tabindex="-1">获取/响应 <a class="header-anchor" href="#获取-响应" aria-hidden="true">#</a></h2><p>获取是通过HTTP发起网络请求获取资源</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">GET</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HTTP/</span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#FFCB6B;">User-Agent:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PostmanRuntime/7.28.4</span></span>
<span class="line"><span style="color:#FFCB6B;">Accept:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;">*</span></span>
<span class="line"><span style="color:#FFCB6B;">Postman-Token:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">4cabe7f5-5deb-</span><span style="color:#F78C6C;">4259</span><span style="color:#C3E88D;">-a861-18305d4f3d34</span></span>
<span class="line"><span style="color:#FFCB6B;">Host:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">www.google.com</span></span>
<span class="line"><span style="color:#FFCB6B;">Accept-Encoding:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gzip,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deflate,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">br</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">keep-alive</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>响应是HTTP请求之后，服务器响应的资源</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">HTTP/1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OK</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Wed,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dec</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2021</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">01</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">11</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">Expires:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-1</span></span>
<span class="line"><span style="color:#FFCB6B;">Cache-Control:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">private,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">max-age=</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Type:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">ISO-</span><span style="color:#F78C6C;">8859</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">P3P:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CP=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is not a P3P policy! See g.co/p3phelp for more info.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Encoding:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gzip</span></span>
<span class="line"><span style="color:#FFCB6B;">Server:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gws</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Length:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6780</span></span>
<span class="line"><span style="color:#FFCB6B;">X-XSS-Protection:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Frame-Options:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SAMEORIGIN</span></span>
<span class="line"><span style="color:#FFCB6B;">Set-Cookie:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">1P_JAR=</span><span style="color:#F78C6C;">2021</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">12</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">22</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">01</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> expires</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Fri,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#A6ACCD;">-Jan-</span><span style="color:#F78C6C;">2022</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> GMT</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> domain</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">.google.com</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Secure</span></span>
<span class="line"><span style="color:#FFCB6B;">Set-Cookie:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NID=</span><span style="color:#F78C6C;">511</span><span style="color:#C3E88D;">=XmMmhzsn4W85P7dvnvS5NnLI17nBbwIUpJz4Trnlxn8N7Eh9GSEEQoi1g4aeEZXjC6COePjj9_AX2lXbmTnoXKQlVsFHqSY5RyVgiTgz7fM4zQVXBZ1p7nwfAyjggjYa3UhlcixqfrZRb-BeNtg1YZwEkTWDE9Bib52JnpJw8Cc</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> expires</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Thu,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23</span><span style="color:#A6ACCD;">-Jun-</span><span style="color:#F78C6C;">2022</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> GMT</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> domain</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">.google.com</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpOnly</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">close</span></span>
<span class="line"></span></code></pre></div><p>响应的数据（HTML）在body里</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">doctype</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">itemscope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">itemtype</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schema.org/WebPage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ko</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/html; charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-hidden="true">#</a></h2><p>经过HTTP请求服务器响应数据（HTML）之后就进入到HTML的解析阶段了。解析阶段的工作是将HTML解析成DOM树，将CSS解析成CSSOM树，然后将DOM树和CSSOM树合成渲染树。</p><h3 id="解析html" tabindex="-1">解析HTML <a class="header-anchor" href="#解析html" aria-hidden="true">#</a></h3><p>浏览器通过HTML解析器解析HTML，先标记HTML并构建成DOM树，解析HTML是一个非常复杂的过程。这里简单描述一下解析过程。具体算法见<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_parsing_algorithm" target="_blank" rel="noreferrer">解析算法</a> 浏览器通过HTML解析器，将DOM元素和属性节点构造成树的结构 例如</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      Hello World</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>以上HTML代码将解析为如下图所示的DOM树结构 <img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640178472626-04e2fd51-c000-4581-b4cf-c6be1769deb8.png#clientId=udd2ffb8a-462d-4&amp;from=paste&amp;id=u00cc9be5&amp;originHeight=219&amp;originWidth=400&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u20700793-ace0-447e-8d74-d2a0460af3e&amp;title=" alt=""></p><h3 id="解析css" tabindex="-1">解析CSS <a class="header-anchor" href="#解析css" aria-hidden="true">#</a></h3><p>浏览器通过CSS相关的解析器，将CSS解析成CSSOM树，CSS解析器会将CSS文件解析成StyleSheet对象，且每个对象都包含CSS规则，CSS规则对象包含选择器和声明对象，以及其他与CSS语法对应的对象。 例如，有以下CSS规则</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#B2CCD6;">margin-top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">error</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>CSS解析器将CSS规则解析成如下图的CSSOM树 <img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640179125548-69276dff-4017-4d8b-aac5-4c912928fbd2.png#clientId=udd2ffb8a-462d-4&amp;from=paste&amp;id=ue2a15bf4&amp;originHeight=393&amp;originWidth=500&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u430654ef-3f84-4252-a8d3-ee73ffcf236&amp;title=" alt=""></p><h3 id="预加载扫描器-preload-scan" tabindex="-1">预加载扫描器(preload scan) <a class="header-anchor" href="#预加载扫描器-preload-scan" aria-hidden="true">#</a></h3><p>浏览器构建DOM树时，整个过程是从上至下扫描解析的，如果这时有script链接了较大的js文件，这时需先下载完js文件，然后再回来继续解析，这个过程占用了主线程。 这种情况下，加入async和defer属性即可减少阻塞情况</p><ul><li>async，后台下载脚本，下载完则执行脚本，多个脚本加入async属性时下载完的脚本执行顺序无法确定，因为下载完脚本即执行。</li><li>defer，将脚本延迟下载，等待HTML解析完再下在脚本</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">styles.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myscript.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myimage.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">image description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">anotherscript.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="构建渲染树" tabindex="-1">构建渲染树 <a class="header-anchor" href="#构建渲染树" aria-hidden="true">#</a></h3><p>DOM树和CSSOM树构建完成之后，将这两棵树合成渲染树Renderer Tree。 <img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640181000184-89018721-e308-42ce-8cc3-b69bceaa64d1.png#clientId=udd2ffb8a-462d-4&amp;from=paste&amp;id=uf7e22f85&amp;originHeight=411&amp;originWidth=880&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u966d839c-c6d8-4051-821f-c9a8fb369cf&amp;title=" alt=""> 构建渲染树过程中，浏览器大致执行以下操作</p><ol><li>从DOM树的根节点开始遍历，遍历每个可见的节点</li></ol><ul><li>某些不可见的节点（例如，script、meta等），在渲染过程中将会被忽略</li><li>一些节点由于是使用CSS将其隐藏（例如：display: none）的也会被忽略</li></ul><ol start="2"><li>对于每个可见的节点，都会将应用上CSSOM对应的规则。</li><li>Render树保存所有具有内容和计算样式的可见节点，根据CSS级联确定每个节点的计算样式。</li></ol><p>最终输出一颗渲染树，这可渲染树包含屏幕上有所可见内容的内容和样式信息。渲染树构建完成之后，接下来进入“布局”阶段了。</p><h2 id="渲染" tabindex="-1">渲染 <a class="header-anchor" href="#渲染" aria-hidden="true">#</a></h2><p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。</p><h3 id="布局-重排" tabindex="-1">布局（重排） <a class="header-anchor" href="#布局-重排" aria-hidden="true">#</a></h3><p>布局是一个递归的过程，从根渲染器开始，计算每个节点的几何信息，确定渲染树中所有节点的宽度、高度和位置，以及确定每个页面上每个对象大小和位置。 <img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640186993860-fd489003-8306-4b37-8da1-7ed86b12daa8.png#clientId=udd2ffb8a-462d-4&amp;from=paste&amp;id=u07e90989&amp;originHeight=545&amp;originWidth=880&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0a5fe2be-9d67-41aa-814d-344fde58e8c&amp;title=" alt=""> 第一次确定节点的大小和位置等几何信息成为<strong>布局</strong>，随后节点大小和位置发生变化需要重新计算的过程称为<strong>回流</strong>。</p><h3 id="绘制" tabindex="-1">绘制 <a class="header-anchor" href="#绘制" aria-hidden="true">#</a></h3><p>绘制是最后一个阶段，浏览器将布局阶段计算的几何信息转换为屏幕上的实际像素。绘制包括将元素的每个可视部分绘制到屏幕上，包括文本、颜色、边框、阴影和替换的元素（如按钮和图像）。</p><p>绘制过程有几个概念</p><ul><li>重绘</li><li>合成</li></ul><p><strong>重绘</strong> 当元素的颜色等（除大小，位置）发生变化时，浏览器需要更新这些信息，这个过程称为<strong>重绘</strong>。</p><p><strong>合成</strong> 在平滑滚动的场景下，浏览器经常需要计算样式，回流和重绘，这种情况下很多像素需要快速绘制，为了确保重绘的速度比初始绘制的速度更快，屏幕上的绘图通常被分解成数层。如果发生这种情况，则需要进行<strong>合成</strong>。</p><p>所有流程走完之后，用户就可以浏览页面了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640048709537-f999fbd5-d430-4535-b496-2717928273dd.png#clientId=u1518ca1a-9476-4&amp;from=paste&amp;id=NsCqK&amp;originHeight=289&amp;originWidth=624&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0558adc9-924a-4ad1-8f63-282de38484a&amp;title=" alt=""></p><ol><li>DNS 查找：查找 Web 地址的 IP。</li><li>TCP 握手：为后续步骤设置客户端和服务器之间的 TCP/IP 通信。</li><li>TLS 握手：保护将通过加密发送的信息。</li><li>HTTP 通信：建立一种浏览器可以理解的通信方式。</li><li>浏览器解析：解析 HTML，生成DOM树、CSSOM树、合成渲染树。</li><li>浏览器渲染：经过布局、绘制后在浏览器窗口上渲染文档。</li></ol><h1 id="浏览器相关知识" tabindex="-1">浏览器相关知识 <a class="header-anchor" href="#浏览器相关知识" aria-hidden="true">#</a></h1><h2 id="浏览器主要组件" tabindex="-1">浏览器主要组件 <a class="header-anchor" href="#浏览器主要组件" aria-hidden="true">#</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1639963055765-1eb274cc-f378-44ec-bd86-a349d7d26e59.png#clientId=ud76ff6ad-f5ab-4&amp;from=paste&amp;id=yHrGy&amp;originHeight=339&amp;originWidth=500&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u790d37e4-1828-452f-a465-2ae99166c76&amp;title=" alt=""></p><h3 id="ui界面" tabindex="-1">UI界面 <a class="header-anchor" href="#ui界面" aria-hidden="true">#</a></h3><p>包括地址栏、前进/后退按钮、书签、菜单等，其他各个显示的部分都属于用户界面</p><h3 id="浏览器引擎" tabindex="-1">浏览器引擎 <a class="header-anchor" href="#浏览器引擎" aria-hidden="true">#</a></h3><p>在用户界面和渲染引擎直接传送指令</p><h3 id="渲染引擎" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎" aria-hidden="true">#</a></h3><p>负责显示请求的内容，如果请求的内容是HTML，则解析HTML和CSS，并将解析后的内容显示在屏幕上。</p><h3 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-hidden="true">#</a></h3><p>用于网络调用，比如HTTP请求。</p><h3 id="用户界面后端" tabindex="-1">用户界面后端 <a class="header-anchor" href="#用户界面后端" aria-hidden="true">#</a></h3><p>用于绘制基本的窗口小部件。</p><h3 id="javascript解释器" tabindex="-1">JavaScript解释器 <a class="header-anchor" href="#javascript解释器" aria-hidden="true">#</a></h3><p>用于解析和执行JavaScript代码</p><h3 id="数据存储" tabindex="-1">数据存储 <a class="header-anchor" href="#数据存储" aria-hidden="true">#</a></h3><p>持久层，是一个浏览器内的轻便的数据库，可以保存数据到硬盘。</p><h2 id="chrome浏览器架构" tabindex="-1">Chrome浏览器架构 <a class="header-anchor" href="#chrome浏览器架构" aria-hidden="true">#</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/743297/1640093980601-b833ef5f-019b-4d6a-abba-9cd1008c76c0.png#clientId=ua4d42fe3-928a-4&amp;from=paste&amp;height=1079&amp;id=xoxhx&amp;name=image.png&amp;originHeight=1079&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=472683&amp;status=done&amp;style=none&amp;taskId=u628e8401-5c2a-4a7d-91ef-4586a48e755&amp;title=&amp;width=1920" alt="image.png"></p><p>从图中可以看出， Chrome 浏览器包括：</p><ul><li>1 个浏览器（Browser）主进程</li><li>1 个 GPU 进程</li><li>多个工具层进程</li><li>多个渲染进程</li><li>多个插件进程</li><li>多个扩展进程</li></ul><h3 id="浏览器进程" tabindex="-1">浏览器进程 <a class="header-anchor" href="#浏览器进程" aria-hidden="true">#</a></h3><p>主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p><h3 id="渲染进程" tabindex="-1">渲染进程 <a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a></h3><p>核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p><h3 id="gpu-进程" tabindex="-1">GPU 进程 <a class="header-anchor" href="#gpu-进程" aria-hidden="true">#</a></h3><p>Chrome 的 UI 界面选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。Chrome 在其多进程架构上也引入了 GPU 进程。</p><h3 id="工具进程" tabindex="-1">工具进程 <a class="header-anchor" href="#工具进程" aria-hidden="true">#</a></h3><p>工具进程用于短暂的工作；提供沙箱环境运行不信任的代码等</p><h3 id="插件进程" tabindex="-1">插件进程 <a class="header-anchor" href="#插件进程" aria-hidden="true">#</a></h3><p>主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><h3 id="扩展进程" tabindex="-1">扩展进程 <a class="header-anchor" href="#扩展进程" aria-hidden="true">#</a></h3><p>扩展程序对浏览器、页面和系统的访问受限；无需重启即可安装和卸载扩展程序</p><h1 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-hidden="true">#</a></h1><blockquote><p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noreferrer">浏览器的工作原理：新式网络浏览器幕后揭秘</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noreferrer">渲染页面：浏览器的工作原理</a><a href="https://time.geekbang.org/column/intro/100033601" target="_blank" rel="noreferrer">极客时间|浏览器工作原理与实践</a><a href="https://juejin.cn/post/6844904046411644941" target="_blank" rel="noreferrer">一文看懂Chrome浏览器工作原理</a><a href="https://dev.to/gitpaulo/journey-of-a-web-page-how-browsers-work-10co" target="_blank" rel="noreferrer">Journey of a web page 🛣️ - How browsers work</a><a href="https://www.youtube.com/watch?v=PzzNuCk-e0Y&amp;t=601s" target="_blank" rel="noreferrer">Anatomy of the browser 101 (Chrome University 2019)</a></p></blockquote>`,99),o=[e];function t(r,c,i,d,y,D){return a(),n("div",null,o)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
