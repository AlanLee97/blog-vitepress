import{_ as a,o as s,c as n,b as l}from"./app.d2d47940.js";const d=JSON.parse('{"title":"Spring 事务中/Transactional 的使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、/Transactional 注解管理事务的实现步骤","slug":"一、-transactional-注解管理事务的实现步骤","link":"#一、-transactional-注解管理事务的实现步骤","children":[]},{"level":2,"title":"二、Spring 的注解方式的事务实现机制","slug":"二、spring-的注解方式的事务实现机制","link":"#二、spring-的注解方式的事务实现机制","children":[]},{"level":2,"title":"三、注解方式的事务使用注意事项","slug":"三、注解方式的事务使用注意事项","link":"#三、注解方式的事务使用注意事项","children":[{"level":3,"title":"正确的设置/Transactional 的 propagation 属性","slug":"正确的设置-transactional-的-propagation-属性","link":"#正确的设置-transactional-的-propagation-属性","children":[]},{"level":3,"title":"正确的设置/Transactional 的 rollbackFor 属性","slug":"正确的设置-transactional-的-rollbackfor-属性","link":"#正确的设置-transactional-的-rollbackfor-属性","children":[]},{"level":3,"title":"/Transactional 只能应用到 public 方法才有效","slug":"transactional-只能应用到-public-方法才有效","link":"#transactional-只能应用到-public-方法才有效","children":[]},{"level":3,"title":"避免 Spring 的 AOP 的自调用问题","slug":"避免-spring-的-aop-的自调用问题","link":"#避免-spring-的-aop-的自调用问题","children":[]}]}],"relativePath":"knowledges/tech/java/framework/Spring 事务中@Transactional 的使用.md","lastUpdated":1678618356000}'),t={name:"knowledges/tech/java/framework/Spring 事务中@Transactional 的使用.md"},o=l(`<h1 id="spring-事务中-transactional-的使用" tabindex="-1">Spring 事务中/Transactional 的使用 <a class="header-anchor" href="#spring-事务中-transactional-的使用" aria-hidden="true">#</a></h1><blockquote><p>原文链接：<a href="https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html" target="_blank" rel="noreferrer">https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html</a></p></blockquote><blockquote><p>参考文章：<a href="https://blog.csdn.net/qq_32867467/article/details/82944473" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_32867467/article/details/82944473</a></p></blockquote><p>事务管理是应用系统开发中必不可少的一部分。Spring 为事务管理提供了丰富的功能支持。Spring 事务管理分为编码式和声明式的两种方式。编程式事务指的是通过编码方式实现事务；声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多。声明式事务有两种方式，一种是在配置文件（xml）中做相关的事务规则声明，另一种是基于/Transactional 注解的方式。</p><h2 id="一、-transactional-注解管理事务的实现步骤" tabindex="-1">一、/Transactional 注解管理事务的实现步骤 <a class="header-anchor" href="#一、-transactional-注解管理事务的实现步骤" aria-hidden="true">#</a></h2><p>使用/Transactional 注解管理事务的实现步骤分为两步。</p><p>第一步，在 xml 配置文件中添加如清单 1 的事务配置信息。除了用配置文件的方式，@EnableTransactionManagement 注解也可以启用事务管理功能。这里以简单的 DataSourceTransactionManager 为例。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">tx</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">annotation-driven</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bean</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transactionManager</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">property</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dataSource</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dataSource</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">bean</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>第二步，将/Transactional 注解添加到合适的方法上，并设置合适的属性信息。/Transactional 注解的属性信息如表 1 展示。</p><blockquote><p>在Spring Boot中，当使用spring-boot-starter-jdbc或spring-boot-starter-data-jpa依赖的时候，框架会自动默认分别注入DataSourceTransactionManager或JpaTransactionManager，所以**可以直接使用/Transactional 注解 **，无需做任何配置</p></blockquote><h5 id="transactional-注解的属性信息" tabindex="-1">/Transactional 注解的属性信息 <a class="header-anchor" href="#transactional-注解的属性信息" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td></tr><tr><td style="text-align:left;">propagation</td><td style="text-align:left;">事务的传播行为，默认值为 REQUIRED。</td></tr><tr><td style="text-align:left;">isolation</td><td style="text-align:left;">事务的隔离度，默认值采用 DEFAULT。</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td style="text-align:left;">read-only</td><td style="text-align:left;">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td></tr><tr><td style="text-align:left;">rollback-for</td><td style="text-align:left;">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td></tr><tr><td style="text-align:left;">no-rollback- for</td><td style="text-align:left;">抛出 no-rollback-for 指定的异常类型，不回滚事务。</td></tr></tbody></table><p>除此以外，/Transactional 注解也可以添加到类级别上。当把/Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。当类级别配置了@Transactional，方法级别也配置了@Transactional，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息。</p><p><strong>优先级顺序为方法 &gt; 实现类 &gt; 接口</strong></p><h5 id="事务属性" tabindex="-1">事务属性 <a class="header-anchor" href="#事务属性" aria-hidden="true">#</a></h5><p>事务属性包含以下五个方面：隔离级别、传播行为、回滚规则、事务超时、只读。</p><h5 id="事务隔离级别" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a></h5><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><table><thead><tr><th>隔离级别常量</th><th>说明</th></tr></thead><tbody><tr><td>TransactionDefinition.ISOLATION_DEFAULT</td><td>这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED</td></tr><tr><td>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</td><td>该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</td></tr><tr><td>TransactionDefinition.ISOLATION_READ_COMMITTED</td><td>该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</td></tr><tr><td>TransactionDefinition.ISOLATION_REPEATABLE_READ</td><td>该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</td></tr><tr><td>TransactionDefinition.ISOLATION_SERIALIZABLE</td><td>所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</td></tr></tbody></table><h5 id="事务传播行为" tabindex="-1">事务传播行为 <a class="header-anchor" href="#事务传播行为" aria-hidden="true">#</a></h5><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><table><thead><tr><th>传播行为常量</th><th>说明</th></tr></thead><tbody><tr><td>TransactionDefinition.PROPAGATION_REQUIRED</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</td></tr><tr><td>TransactionDefinition.PROPAGATION_REQUIRES_NEW</td><td>创建一个新的事务，如果当前存在事务，则把当前事务挂起。</td></tr><tr><td>TransactionDefinition.PROPAGATION_SUPPORTS</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NEVER</td><td>以非事务方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>TransactionDefinition.PROPAGATION_MANDATORY</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NESTED</td><td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</td></tr></tbody></table><h5 id="事务超时" tabindex="-1">事务超时 <a class="header-anchor" href="#事务超时" aria-hidden="true">#</a></h5><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p><h5 id="事务只读属性" tabindex="-1">事务只读属性 <a class="header-anchor" href="#事务只读属性" aria-hidden="true">#</a></h5><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。</p><p>默认为读写事务。</p><h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserServiceImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Autowired</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">UserMapper</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testTxAdd</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tx_test1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-06-01 09:40:10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tx_test2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-06-01 09:40:10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tx_test3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tx_test4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-06-01 09:40:10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tx_test4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-06-01 09:40:10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>i = userMapper.add(new User(&quot;tx_test3&quot;, &quot;abc&quot;));这一行代码会发生错误，第二个参数无法转换成时间，所以加入事务控制之后，所有的添加用户的操作都会回滚。</p><h2 id="二、spring-的注解方式的事务实现机制" tabindex="-1">二、Spring 的注解方式的事务实现机制 <a class="header-anchor" href="#二、spring-的注解方式的事务实现机制" aria-hidden="true">#</a></h2><p>在应用系统调用声明/Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，根据/Transactional 的属性配置信息，这个代理对象决定该声明/Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截，在 TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器(图 2 有相关介绍)AbstractPlatformTransactionManager 操作数据源 DataSource 提交或回滚事务, 如图 1 所示。</p><h5 id="图-1-spring-事务实现机制" tabindex="-1">图 1. Spring 事务实现机制 <a class="header-anchor" href="#图-1-spring-事务实现机制" aria-hidden="true">#</a></h5><p><img src="https://gitee.com/AlanLee97/public-asset/raw/master/note_images/image001.jpg#alt=img" alt=""></p><p>Spring AOP 代理有 CglibAopProxy 和 JdkDynamicAopProxy 两种，图 1 是以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。</p><p>正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。</p><p>PlatformTransactionManager，AbstractPlatformTransactionManager 及具体实现类关系如图 2 所示。</p><h5 id="图-2-transactionmanager-类结构" tabindex="-1">图 2. TransactionManager 类结构 <a class="header-anchor" href="#图-2-transactionmanager-类结构" aria-hidden="true">#</a></h5><p><img src="https://gitee.com/AlanLee97/public-asset/raw/master/note_images/image002.jpg#alt=img" alt=""></p><h2 id="三、注解方式的事务使用注意事项" tabindex="-1">三、注解方式的事务使用注意事项 <a class="header-anchor" href="#三、注解方式的事务使用注意事项" aria-hidden="true">#</a></h2><p>对 Spring 的基于注解方式的实现步骤和事务内在实现机制有较好的理解之后，就会更好的使用注解方式的事务管理，避免当系统抛出异常，数据不能回滚的问题。</p><h3 id="正确的设置-transactional-的-propagation-属性" tabindex="-1">正确的设置/Transactional 的 propagation 属性 <a class="header-anchor" href="#正确的设置-transactional-的-propagation-属性" aria-hidden="true">#</a></h3><p>需要注意下面三种 propagation 可以不启动事务。本来期望目标方法进行事务管理，但若是错误的配置这三种 propagation，事务将不会发生回滚。</p><ol><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li></ol><h3 id="正确的设置-transactional-的-rollbackfor-属性" tabindex="-1">正确的设置/Transactional 的 rollbackFor 属性 <a class="header-anchor" href="#正确的设置-transactional-的-rollbackfor-属性" aria-hidden="true">#</a></h3><p>默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。</p><p>如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor。例：</p><p>@Transactional(propagation= Propagation.REQUIRED,rollbackFor= MyException.class)</p><p>通过分析 Spring 源码可以知道，若在目标方法中抛出的异常是 rollbackFor 指定的异常的子类，事务同样会回滚。</p><h5 id="rollbackruleattribute-的-getdepth-方法" tabindex="-1">RollbackRuleAttribute 的 getDepth 方法 <a class="header-anchor" href="#rollbackruleattribute-的-getdepth-方法" aria-hidden="true">#</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDepth</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> exceptionClass</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> depth</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exceptionClass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">exceptionName</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Found it!</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> depth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// If we&#39;ve gone as far as we can go and haven&#39;t found it...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exceptionClass </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> Throwable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exceptionClass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSuperclass</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> depth </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="transactional-只能应用到-public-方法才有效" tabindex="-1">/Transactional 只能应用到 public 方法才有效 <a class="header-anchor" href="#transactional-只能应用到-public-方法才有效" aria-hidden="true">#</a></h3><p>只有/Transactional 注解应用到 public 方法，才能进行事务管理。这是因为在使用 Spring AOP 代理时，Spring 在调用在图 1 中的 TransactionInterceptor 在目标方法执行前后进行拦截之前，DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的的 intercept 方法或 JdkDynamicAopProxy 的 invoke 方法会间接调用 AbstractFallbackTransactionAttributeSource（Spring 通过这个类获取表 1. /Transactional 注解的事务属性配置属性信息）的 computeTransactionAttribute 方法。</p><h4 id="abstractfallbacktransactionattributesource" tabindex="-1">AbstractFallbackTransactionAttributeSource <a class="header-anchor" href="#abstractfallbacktransactionattributesource" aria-hidden="true">#</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionAttribute</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computeTransactionAttribute</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> targetClass</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Don&#39;t allow no-public methods as required.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">allowPublicMethodsOnly</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">Modifier</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isPublic</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getModifiers</span><span style="color:#89DDFF;">()))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这个方法会检查目标方法的修饰符是不是 public，若不是 public，就不会获取/Transactional 的属性配置信息，最终会造成不会用 TransactionInterceptor 来拦截该目标方法进行事务管理。</p><h3 id="避免-spring-的-aop-的自调用问题" tabindex="-1">避免 Spring 的 AOP 的自调用问题 <a class="header-anchor" href="#避免-spring-的-aop-的自调用问题" aria-hidden="true">#</a></h3><p>在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有/Transactional 注解的方法内部调用有/Transactional 注解的方法，有/Transactional 注解的方法的事务被忽略，不会发生回滚。见举例代码展示。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OrderService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insert</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    	</span><span style="color:#82AAFF;">insertOrder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insertOrder</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//insert log info</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//insertOrder</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//updateAccount</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>insertOrder 尽管有/Transactional 注解，但它被内部方法 insert 调用，事务被忽略，出现异常事务不会发生回滚。</p><p>上面的两个问题/Transactional 注解只应用到 public 方法和自调用问题，是由于使用 Spring AOP 代理造成的。为解决这两个问题，使用 AspectJ 取代 Spring AOP 代理。</p>`,62),p=[o];function e(r,c,i,D,y,F){return s(),n("div",null,p)}const C=a(t,[["render",e]]);export{d as __pageData,C as default};
