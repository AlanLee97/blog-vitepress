import{_ as s,o as n,c as a,b as o}from"./app.d2d47940.js";const _=JSON.parse('{"title":"react的生命周期函数","description":"","frontmatter":{},"headers":[],"relativePath":"knowledges/frontend/react/learn/08-react的生命周期函数.md","lastUpdated":1678620975000}'),e={name:"knowledges/frontend/react/learn/08-react的生命周期函数.md"},l=o(`<h1 id="react的生命周期函数" tabindex="-1">react的生命周期函数 <a class="header-anchor" href="#react的生命周期函数" aria-hidden="true">#</a></h1><p>生命周期函数是某一时刻会自动执行的函数</p><p><img src="https://img2018.cnblogs.com/blog/1128201/201910/1128201-20191001232453114-1666226727.png#alt=react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" alt=""></p><ol><li>componentWillMount：组件将要被挂载时执行</li><li>render</li><li>componentDidMount：组件已经被挂载时执行</li><li>shouldComponentUpdate：组件更新之前执行，需返回一个布尔值</li><li>componentWillUpdate：在shouldComponentUpdate返回true时执行</li><li>componentDidUpdate：组件更新完成后执行</li><li>componentWillReceiveProps：一个组件从父组件接收参数，只要父组件的render函数执行了，子组件的这个生命周期函数就会被执行。第一次不会执行</li><li>componentWillUnmount:组件将要被解除挂载的时候执行</li></ol><p>实例</p><p>当父组件TodoList更新时，子组件TodoItem不更新，当父组件向子组件传递内容时才更新子组件</p><p>TodoItem.js</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">shouldComponentUpdate</span><span style="color:#A6ACCD;">(nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nextState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nextContext) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">TodoItem shouldComponentUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// return false;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextProps</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,8),t=[l];function p(c,r,i,d,D,F){return n(),a("div",null,t)}const m=s(e,[["render",p]]);export{_ as __pageData,m as default};
