import{_ as e,o as t,c as a,b as c}from"./app.d2d47940.js";const g=JSON.parse('{"title":"IO多路复用","description":"","frontmatter":{},"headers":[],"relativePath":"knowledges/tech/database/nosql/Redis-IO多路复用.md","lastUpdated":1678618356000}'),s={name:"knowledges/tech/database/nosql/Redis-IO多路复用.md"},d=c('<h1 id="io多路复用" tabindex="-1">IO多路复用 <a class="header-anchor" href="#io多路复用" aria-hidden="true">#</a></h1><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p><p><img src="https://pic3.zhimg.com/50/9155e2307879cd7ce515e7a997b9d532_hd.jpg#alt=img" alt=""><img src="https://pic3.zhimg.com/80/9155e2307879cd7ce515e7a997b9d532_1440w.jpg#alt=img" alt=""></p><p>这样在处理1000个连接时，只需要1个线程监控就绪状态，对就绪的每个连接开一个线程处理就可以了，这样需要的线程数大大减少，减少了内存开销和上下文切换的CPU开销。</p><p>使用select函数的方式如下图所示：</p><p><img src="https://pic4.zhimg.com/50/bf52854bd1dc678de998b77aebaa2311_hd.jpg#alt=img" alt=""><img src="https://pic4.zhimg.com/80/bf52854bd1dc678de998b77aebaa2311_1440w.jpg#alt=img" alt=""></p>',6),i=[d];function o(p,_,r,l,n,m){return t(),a("div",null,i)}const b=e(s,[["render",o]]);export{g as __pageData,b as default};
